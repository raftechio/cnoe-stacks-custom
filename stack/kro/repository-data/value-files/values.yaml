
additionalLabels: {}

rbac:
  # Specifies how to manage access for kro in the cluster
  # Two modes are currently supported:
  # - unrestricted: Grants cluster-wide full access to all resources
  # - aggregation: Grants a minimal set of permissions for kro to manage its own
  #                resources, and additionally aggregates ClusterRoles with the
  #                label `rbac.kro.run/aggregate-to-controller: "true"` to allow
  #                kro users to extend kro's permissions.
  # Recommended setting is aggregation, but unrestricted remains the default for
  # backwards compatibility.
  #NOTE: This should NOT be done in production environment.
  mode: unrestricted 


deployment:
  # Number of replicas for the Pods to run
  replicaCount: 2
  # Port that the container will expose
  containerPort: 8078
  # Annotations to add to the Pod
  podAnnotations: {}
  # Labels to add to the Pod
  podLabels: {}
  # Security context settings at the Pod level
  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault
  # Security context settings at the container level
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    privileged: false
    capabilities:
      drop:
        - ALL
  # Resource requests and limits settings
  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 256m
      memory: 128Mi
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
  affinity: {}
  priorityClassName: ""
  # Specifies the hostname of the Pod.
  # If not specified, the pod's hostname will be set to a system-defined value.
  hostNetwork: false
  # Set DNS policy for the pod.
  # Defaults to "ClusterFirst".
  # Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
  # To have DNS options set along with hostNetwork, you have to specify DNS policy
  # explicitly to 'ClusterFirstWithHostNet'.
  dnsPolicy: ClusterFirst
  # Additional volume settings for Pods
  extraVolumes: []
  # Additional volume mount settings for Pods
  extraVolumeMounts: []

# Application configuration settings
config:
  # Allow kro to delete CRDs
  allowCRDDeletion: false
  # The maximum number of queries per second to allow
  clientQps: 100
  # The number of requests that can be stored for processing before the server starts enforcing the QPS limit
  clientBurst: 150
  # Enable leader election for controller manager. Enabling this will ensure there is only one active controller manager.
  enableLeaderElection: true
  # The address the metric endpoint binds to
  metricsBindAddress: :8078
  # The address the probe endpoint binds to
  healthProbeBindAddress: :8079
  # The number of resource graph definition reconciles to run in parallel
  resourceGraphDefinitionConcurrentReconciles: 1
  # The number of dynamic controller reconciles to run in parallel
  dynamicControllerConcurrentReconciles: 1
  # The interval at which the controller will re list resources even with no changes, in seconds
  dynamicControllerDefaultResyncPeriod: 36000
  # The maximum number of retries for an item in the queue will be retried before being dropped
  dynamicControllerDefaultQueueMaxRetries: 20
  # The maximum duration to wait for the controller to gracefully shutdown, in seconds
  dynamicControllerDefaultShutdownTimeout: 60
  # The log level verbosity. 0 is the least verbose, 5 is the most verbose
  logLevel: 3

metrics:
  service:
    # Set to true to automatically create a Kubernetes Service resource for the
    # Prometheus metrics server endpoint in controller
    create: true
    type: "ClusterIP"
    # Port for the metrics service
    port: 8080
  serviceMonitor:
    # -- Whether to create a ServiceMonitor
    enabled: true
    # -- Set of labels to transfer from the Kubernetes Service onto the target
    additionalLabels: {}
    # -- Set how frequently Prometheus should scrape
    interval: 1m
    # -- Set timeout for scrape
    scrapeTimeout: 10s
    # -- Set path to metrics path
    telemetryPath: /metrics
    # -- Set of labels to transfer from the Kubernetes Service onto the target
    targetLabels: []
    # -- MetricRelabelConfigs to apply to samples before ingestion
    metricRelabelings: []
    # - action: replace
    #   replacement: my-cluster
    #   targetLabel: cluster
    relabelings: []
    # - action: replace
    #   replacement: my-cluster
    #   targetLabel: cluster
